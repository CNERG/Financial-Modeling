# -*- coding: utf-8 -*-
"""
Created on Thu Nov 21 13:33:50 2019

@author: jjjlp
"""

import numpy as np
import pandas as pd



xl = pd.ExcelFile('Simple PMT Variable Inputs.xlsx')
dfInputs = xl.parse("Sensitivity Inputs")
dfAssumptions = xl.parse("Assumptions")

dfInputs = dfInputs.fillna(0)
dfInputs['Plant Life (Years)'] = dfInputs['Plant Life (Years)'].astype(int)


print(dfInputs)
print(dfAssumptions)
interest = .03
UtilityRate = .06   # $/Kwh
#####################################################################################################################
DaysOfPowerPerYear = 365   ### Enter days needed to run per year; out of 365.
DaysOfPowerPerYearBackup = 7
#############################################################################################
############################################################################################
DaysOfResilience = 56      #If backup power, how much resilience?
FuelIndexDummy = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]

###############################################
ResultsList = []
for Scenario in ['Scenario1','Scenario2','Scenario3','Scenario2']:
  for GenerationInput in ['None','Nuclear', 'Diesel','NaturalGas']:
    for GenerationInputBackup in ['Nuclear', 'Diesel','NaturalGas', 'None']:
       
###############################################
        if Scenario == 'Scenario1':
            UtilityPowerGeneration = 52 #MW
            PowerGeneration=0 #MW
            PowerGenerationBackup = 23 #MW
        elif Scenario == 'Scenario2':
            UtilityPowerGeneration = 26 #MW
            PowerGeneration = 26 #MW
            PowerGenerationBackup = 0 #MW
        elif Scenario == 'Scenario3':
            UtilityPowerGeneration = 29 #MW
            PowerGeneration = 23 #MW
            PowerGenerationBackup = 23 #MW
        elif Scenario == 'Scenario4':
            UtilityPowerGeneration = 0 #MW
            PowerGeneration = 82 #MW
            PowerGenerationBackup = 26 #MW
        else:
            print("error")



        if GenerationInput == 'Nuclear':
            ####Nuclear
            CapacityFactor = dfInputs['Capacity Factor (Decimal)'][0] #
            FuelCost =  dfInputs['Fuel Cost ($/mmBTU)'][0]   #  $/mmBTU
            HeatRate =  dfInputs['Heat Rate (mmBTU/kWh)'][0]#  mmBTU/kWh
            AltFuelCost =  dfInputs['Fuel Cost ($/KWh)'][0] #  $/kWh
            FixedOMCost=  dfInputs['Fixed O&M Cost ($/kWe)'][0]# $/kWe
            VariableOMCost = dfInputs['Variable OM Cost ($/kWh)'][0] # $/kWh
            OneTimeCosts = dfInputs['One Time Costs at beg($)'][0]   # Miscellanious costs in $
            IntermittentCosts =   dfInputs['Refurbishment Cost ($)'][0]   # $ (refueling for nuclear) else enter 0
            CapitalCost =     dfInputs['Capital Cost ($/kWe)'][0]#$/kWe
            NumberOfYears=    dfInputs['Plant Life (Years)'][0]
            CoreLife =  dfInputs['Core Life (Years)'][0]
        elif GenerationInput == 'None':
            CapacityFactor = 1 #
            FuelCost = 0     #  $/mmBTU
            HeatRate = 0  #  mmBTU/kWh
            AltFuelCost = 0  #  $/kWh
            FixedOMCost= 0   # $/kWe
            VariableOMCost = 0   # $/kWh
            OneTimeCosts =0        # Miscellanious costs in $
            IntermittentCosts = 0   # $ (refueling for nuclear) else enter 0
            CapitalCost = 0  #$/kWe
            NumberOfYears=0

        elif GenerationInput == 'NaturalGas':
            #NaturalGas
            CapacityFactor = dfInputs['Capacity Factor (Decimal)'][2]#
            FuelCost =     dfInputs['Fuel Cost ($/mmBTU)'][2] #  $/mmBTU
            HeatRate =    dfInputs['Heat Rate (mmBTU/kWh)'][2]  #  mmBTU/kWh
            AltFuelCost =  dfInputs['Fuel Cost ($/KWh)'][2] #  $/kWh
            FixedOMCost= dfInputs['Fixed O&M Cost ($/kWe)'][2] # $/kWe
            VariableOMCost =   dfInputs['Variable OM Cost ($/kWh)'][2] # $/kWh
            OneTimeCosts = dfInputs['One Time Costs at beg($)'][2]       # Miscellanious costs in $
            IntermittentCosts =  dfInputs['Refurbishment Cost ($)'][2]  # $ (refueling for nuclear) else enter 0
            CapitalCost = dfInputs['Capital Cost ($/kWe)'][2]#$/kWe
            NumberOfYears = dfInputs['Plant Life (Years)'][2]
        elif GenerationInput == 'Diesel':
            #Diesel
            CapacityFactor = dfInputs['Capacity Factor (Decimal)'][1] #
            FuelCost =  dfInputs['Fuel Cost ($/mmBTU)'][1]  #  $/mmBTU
            HeatRate = dfInputs['Heat Rate (mmBTU/kWh)'][1] #  mmBTU/kWh
            AltFuelCost = dfInputs['Fuel Cost ($/KWh)'][1]  #  $/kWh
            FixedOMCost=   dfInputs['Fixed O&M Cost ($/kWe)'][1] # $/kWe
            VariableOMCost = dfInputs['Variable OM Cost ($/kWh)'][1]   # $/kWh
            OneTimeCosts =  dfInputs['One Time Costs at beg($)'][1]   # Miscellanious costs in $
            IntermittentCosts =  dfInputs['Refurbishment Cost ($)'][1]  # $ (refueling for nuclear) else enter 0
            CapitalCost = dfInputs['Capital Cost ($/kWe)'][1]  #$/kWe
            NumberOfYears = dfInputs['Plant Life (Years)'][1]
        else:
            break
       
       
        if GenerationInputBackup =='NaturalGas':
            CapacityFactorBackup =dfInputs['Capacity Factor (Decimal)'][2] #
            FuelCostBackup = dfInputs['Fuel Cost ($/mmBTU)'][2]     #  $/mmBTU
            HeatRateBackup = dfInputs['Heat Rate (mmBTU/kWh)'][2]  #  mmBTU/kWh
            AltFuelCostBackup =  dfInputs['Fuel Cost ($/KWh)'][2] #  $/kWh
            FixedOMCostBackup=  dfInputs['Fixed O&M Cost ($/kWe)'][2]  # $/kWe
            VariableOMCostBackup = dfInputs['Variable OM Cost ($/kWh)'][2]   # $/kWh
            OneTimeCostsBackup =   dfInputs['One Time Costs at beg($)'][2]    # Miscellanious costs in $
            IntermittentCostsBackup = dfInputs['Refurbishment Cost ($)'][2]  # $ (refueling for nuclear) else enter 0
            CapitalCostBackup = dfInputs['Capital Cost ($/kWe)'][2]  #$/kWe
            NumberOfYearsBackup = dfInputs['Plant Life (Years)'][2]
            
        elif GenerationInputBackup == 'None':
            CapacityFactorBackup = 1 #
            FuelCostBackup = 0     #  $/mmBTU
            HeatRateBackup = 0  #  mmBTU/kWh
            AltFuelCostBackup = 0  #  $/kWh
            FixedOMCostBackup= 0   # $/kWe
            VariableOMCostBackup = 0   # $/kWh
            OneTimeCostsBackup =0        # Miscellanious costs in $
            IntermittentCostsBackup = 0   # $ (refueling for nuclear) else enter 0
            CapitalCostBackupBackup = 0  #$/kWe
            NumberOfYearsBackup=0
            
        elif GenerationInputBackup == 'Diesel':
            #Diesel
            CapacityFactorBackup = dfInputs['Capacity Factor (Decimal)'][1] #
            FuelCostBackup = dfInputs['Fuel Cost ($/mmBTU)'][1]   #  $/mmBTU
            HeatRateBackup = dfInputs['Heat Rate (mmBTU/kWh)'][1]#  mmBTU/kWh
            AltFuelCostBackup = dfInputs['Fuel Cost ($/KWh)'][1]  #  $/kWh
            FixedOMCostBackup= dfInputs['Fixed O&M Cost ($/kWe)'][1]  # $/kWe
            VariableOMCostBackup = dfInputs['Variable OM Cost ($/kWh)'][1]   # $/kWh
            OneTimeCostsBackup =  dfInputs['One Time Costs at beg($)'][1]       # Miscellanious costs in $
            IntermittentCostsBackup =  dfInputs['Refurbishment Cost ($)'][1]   # $ (refueling for nuclear) else enter 0
            CapitalCostBackup = dfInputs['Capital Cost ($/kWe)'][1]  #$/kWe
            NumberOfYearsBackup = dfInputs['Plant Life (Years)'][1]
            
        elif GenerationInputBackup == 'Nuclear':
            CapacityFactorBackup = dfInputs['Capacity Factor (Decimal)'][0] #
            FuelCostBackup = dfInputs['Fuel Cost ($/mmBTU)'][0]     #  $/mmBTU
            HeatRateBackup = dfInputs['Heat Rate (mmBTU/kWh)'][0]  #  mmBTU/kWh
            AltFuelCostBackup = dfInputs['Fuel Cost ($/KWh)'][0]  #  $/kWh
            FixedOMCostBackup= dfInputs['Fixed O&M Cost ($/kWe)'][0]   # $/kWe
            VariableOMCostBackup = dfInputs['Variable OM Cost ($/kWh)'][0]   # $/kWh
            OneTimeCostsBackup = dfInputs['One Time Costs at beg($)'][0]        # Miscellanious costs in $
            IntermittentCostsBackup =  dfInputs['Refurbishment Cost ($)'][0]  # $ (refueling for nuclear) else enter 0
            CapitalCostBackup = dfInputs['Capital Cost ($/kWe)'][0] #$/kWe
            NumberOfYearsBackup= dfInputs['Plant Life (Years)'][0]
        else:
            break
        
        
        if Scenario == 'Scenario4' and GenerationInput== 'NaturalGas':
           AltFuelCost = dfInputs['LNG cost ($/KWh)'][2]
        else:
            AltFuelCost= AltFuelCost
        
        
        if Scenario == 'Scenario4' and GenerationInputBackup == 'NaturalGas':
            AltFuelCostBackup = dfInputs['LNG cost ($/KWh)'][2]
        else:
            AltFuelCostBackup = AltFuelCostBackup
           
        if Scenario == 'Scenario1' and GenerationInputBackup == 'NaturalGas':
            AltFuelCostBackup = dfInputs['LNG cost ($/KWh)'][2]
        else:
            AltFuelCostBackup = AltFuelCostBackup

##################################################################################################
##################################################################################################
###################################################################################################
###################################################################################################
        UtilityCost = UtilityPowerGeneration*8766*UtilityRate*1000 # $
#############################################################################################       
        
        CapacityNeeded = PowerGeneration / CapacityFactor     #  MW
        TotalCapitalCost = 1000*CapacityNeeded*CapitalCost    #  $
        TotalAnnualGeneration = DaysOfPowerPerYear*24*1000*CapacityNeeded      #kWh
        if AltFuelCost == 0:
            AnnualFuelCost=FuelCost*HeatRate*TotalAnnualGeneration*CapacityFactor  #  $
            AnnualFixedOMCost = FixedOMCost*CapacityNeeded*1000     #  $
            AnnualVariableOMCost = VariableOMCost*TotalAnnualGeneration# $
   
        else:
            AnnualFuelCost = AltFuelCost*TotalAnnualGeneration*CapacityFactor    #   $
            AnnualFixedOMCost =FixedOMCost*CapacityNeeded*1000    #   $
            AnnualVariableOMCost = VariableOMCost*TotalAnnualGeneration  #  $


        TotalOMCost = AnnualFixedOMCost+AnnualVariableOMCost   #    $


   # print("CapacityNeeded:" , CapacityNeeded)
        #print("TotalCapitalCost:", TotalCapitalCost)
   # print("TotalAnnualGeneration:", TotalAnnualGeneration)
   # print("AnnualFuelCost:", AnnualFuelCost)
   # print("AnnualFixedOMCost:", AnnualFixedOMCost)
   # print("AnnualVariableOMCost", AnnualVariableOMCost)
   # print("IntermittentCosts", IntermittentCosts)
   
     
        CapacityNeededBackup = PowerGenerationBackup / CapacityFactorBackup
       
        TotalCapitalCostBackup = 1000*CapacityNeededBackup*CapitalCostBackup
        TotalAnnualGenerationBackup = DaysOfPowerPerYearBackup*24*1000*CapacityNeededBackup
        if AltFuelCostBackup == 0:

           
   
            AnnualFuelCostBackup=FuelCostBackup*HeatRateBackup*TotalAnnualGenerationBackup*CapacityFactorBackup  #  $
            AnnualFixedOMCostBackup = FixedOMCostBackup*CapacityNeededBackup*1000     #  $
            AnnualVariableOMCostBackup = VariableOMCostBackup*TotalAnnualGenerationBackup# $
        else:

            AnnualFuelCostBackup = AltFuelCostBackup*TotalAnnualGenerationBackup*CapacityFactorBackup   #   $
            AnnualFixedOMCostBackup =FixedOMCostBackup*CapacityNeededBackup*1000    #   $
            AnnualVariableOMCostBackup = VariableOMCostBackup*TotalAnnualGenerationBackup  #  $

        TotalOMCostBackup = AnnualFixedOMCostBackup+AnnualVariableOMCostBackup
       
        if AltFuelCostBackup != 0 :
            ReserveFuel = PowerGenerationBackup*1000*8766/365*DaysOfResilience*AltFuelCostBackup
        else:
            ReserveFuel=PowerGenerationBackup*1000*8766/365*DaysOfResilience*FuelCostBackup*HeatRateBackup
   
   
#################################################################################################3
########  For Fuel Escalation Index numbers, visit table Ca-5: https://nvlpubs.nist.gov/nistpubs/ir/2019/NIST.IR.85-3273-34.pdf
        if GenerationInput ==  'Nuclear':
            #FuelEscalation = [1,1.03,1.04,1.04,1.04,1.04,1.04,1.05,1.05,1.05,1.06,1.06,1.07,1.07,1.07,1.07,1.06,1.07,1.07,1.07,1.07,1.07,1.08,1.08,1.08,1.08]
            FuelEscalation = FuelIndexDummy
        elif GenerationInput == 'Diesel':
            #FuelEscalation= [1,0.99, 0.96, 0.93, 0.91, 0.91, 0.93, 0.95, 0.97, 0.99, 1.01, 1.02, 1.03, 1.04, 1.06, 1.06,1.07, 1.09, 1.09, 1.09, 1.10, 1.11 ,1.11, 1.12, 1.12, 1.12, 1.12 ,1.11 ,1.11, 1.11, 1.11]
            FuelEscalation = FuelIndexDummy
        elif GenerationInput == 'NaturalGas':
            #FuelEscalation = [1,1.01, 1.00 ,1.00, 1.02, 1.06, 1.11, 1.14, 1.14, 1.16, 1.16, 1.17, 1.17, 1.19, 1.21, 1.22,1.23, 1.25 ,1.26, 1.26, 1.27 ,1.28, 1.28, 1.29 ,1.30, 1.32, 1.34, 1.36, 1.38, 1.41, 1.44]
            FuelEscalation = FuelIndexDummy
        else:
            FuelEscalation = FuelIndexDummy
       
        if GenerationInputBackup == 'Diesel':
            #FuelEscalation= [1,0.99, 0.96, 0.93, 0.91, 0.91, 0.93, 0.95, 0.97, 0.99, 1.01, 1.02, 1.03, 1.04, 1.06, 1.06,1.07, 1.09, 1.09, 1.09, 1.10, 1.11 ,1.11, 1.12, 1.12, 1.12, 1.12 ,1.11 ,1.11, 1.11, 1.11]
            FuelEscalationBackup = FuelIndexDummy
        elif GenerationInputBackup == 'NaturalGas':
            #FuelEscalation = [1,1.01, 1.00 ,1.00, 1.02, 1.06, 1.11, 1.14, 1.14, 1.16, 1.16, 1.17, 1.17, 1.19, 1.21, 1.22,1.23, 1.25 ,1.26, 1.26, 1.27 ,1.28, 1.28, 1.29 ,1.30, 1.32, 1.34, 1.36, 1.38, 1.41, 1.44]
            FuelEscalationBackup = FuelIndexDummy
        else:
            FuelEscalationBackup = FuelIndexDummy
       
       
        years=["year2019: ", "year2020: ","year2021: ","year2022: ","year2023: ","year2024: ","year2025: ","year2026: ","year2027: ","year2028: ","year2029: ","year2030: ","year2031: ","year2032: ","year2033: ","year2034: ","year2035: ","year2036: ","year2037: ","year2038: ","year2039: ","year2040: ","year2041: ","year2042: ","year2043: ","year2044: ","year2045: ","year2046: ","year2047: ","year2048: ","year2049: ","year2050: ","year2051: ","year2052: ","year2053: ","year2054: ","year2055: ","year2056: ","year2057: ","year2058: ","year2059: ","year2060: "]


        pd.set_option('display.max_columns', None)
        pd.set_option('display.max_rows', None)
       
        UtilityPMT = UtilityCost
        print('UtilityPMT:'+"{:,.2f}".format(UtilityPMT))
       
       
        CapitalCosts = [TotalCapitalCost+OneTimeCosts]
        OMtList = [0]
        FuelList = [0]
        RefurbishmentList = [0]
        for t in range(1,NumberOfYears+1):
            Ft = (AnnualFuelCost*FuelEscalation[t])
            OMt = (TotalOMCost)
            FuelList.append(Ft)
            OMtList.append(OMt)
            CapitalCosts.append(0)
            if GenerationInput == 'Nuclear' and t % CoreLife == 0:
                RefurbishmentList.append(float(IntermittentCosts))
            else:
                RefurbishmentList.append(0)
        dfPrimary = pd.DataFrame(list(zip(years, CapitalCosts, RefurbishmentList ,OMtList, FuelList)), columns = ['Year', 'CapInv.', 'Refurbishment Cost','O&M', 'FuelCost'])
        dfPrimary['Total'] =dfPrimary['O&M']+dfPrimary['CapInv.']+dfPrimary['FuelCost']+dfPrimary['Refurbishment Cost']
        dfPrimary['O&M'] = dfPrimary.apply(lambda x: "{:,.2f}".format(x['O&M']), axis=1)
        dfPrimary['CapInv.'] = dfPrimary.apply(lambda x: "{:,.2f}".format(x['CapInv.']), axis=1)
        dfPrimary['FuelCost'] = dfPrimary.apply(lambda x: "{0:,.2f}".format(x['FuelCost']), axis=1)
        dfPrimary['Refurbishment Cost'] = dfPrimary.apply(lambda x: "{0:,.2f}".format(x['Refurbishment Cost']), axis=1)

        print('dfPrimary',Scenario, GenerationInput, GenerationInputBackup)
        print(dfPrimary)
        PrimaryNPV= np.npv(interest, dfPrimary['Total'])
        PrimaryNPV = np.where(np.isnan(PrimaryNPV), 0, PrimaryNPV)
        val = np.float64(PrimaryNPV)
        PrimaryNPV = val.item()
        print("NPV: "+"{:,.2f}".format(PrimaryNPV));
        #print(CapitalCostSensitivityY)
        PrimaryPMT =np.pmt(interest,NumberOfYears, -PrimaryNPV)
        PrimaryPMT = np.where(np.isnan(PrimaryPMT), 0, PrimaryPMT)
        print("Payment: "+"${:,.2f}".format(PrimaryPMT))
        #print(Scenario,GenerationInput,GenerationInputBackup)


        CapitalCostsBackup = [TotalCapitalCostBackup+OneTimeCostsBackup]
        ReserveFuelList = [ReserveFuel]
        BackupOMList= [0]
        BackupFuelCostList = [0]

        for t in range(1,NumberOfYearsBackup+1):
            FtBackup = (AnnualFuelCostBackup*FuelEscalationBackup[t])
            OMtBackup = (TotalOMCostBackup)
            BackupOMList.append(OMtBackup)
            BackupFuelCostList.append(FtBackup)
            ReserveFuelList.append(0)
            CapitalCostsBackup.append(0)
        dfBackup = pd.DataFrame(list(zip(years,CapitalCostsBackup, ReserveFuelList, BackupFuelCostList,BackupOMList)), columns = ['Year','CapitalCost', 'ReserveFuel', 'BackupFuel', 'BackupO&M'])
        dfBackup['Total'] =dfBackup['CapitalCost']+dfBackup['ReserveFuel']+dfBackup['BackupFuel']+dfBackup['BackupO&M']
        dfBackup['CapitalCost'] = dfBackup.apply(lambda x: "{0:,.2f}".format(x['CapitalCost']), axis=1)
        dfBackup['ReserveFuel'] = dfBackup.apply(lambda x: "{0:,.2f}".format(x['ReserveFuel']), axis=1)
        dfBackup['BackupFuel'] = dfBackup.apply(lambda x: "{0:,.2f}".format(x['BackupFuel']), axis=1)
        dfBackup['BackupO&M'] = dfBackup.apply(lambda x: "{0:,.2f}".format(x['BackupO&M']), axis=1)
        print('df Backup',Scenario, GenerationInput, GenerationInputBackup)
        print(dfBackup)
        BackupNPV= np.npv(interest, dfBackup['Total'])
        val = np.float64(BackupNPV)
        BackupNPV = val.item()
        print("NPV backup: "+"{:,.2f}".format(BackupNPV));
        BackupPMT =np.pmt(interest,NumberOfYearsBackup, -BackupNPV)
        BackupPMT = np.where(np.isnan(BackupPMT), 0, BackupPMT)
        print("Payment backup: "+"${:,.2f}".format(BackupPMT))
       
       
       
       
       
       
        TotalPMT = PrimaryPMT+BackupPMT+UtilityPMT
        ResultsList.append([Scenario, GenerationInput, GenerationInputBackup, TotalPMT])
        #print(Scenario,GenerationInput,GenerationInputBackup,"Payment: "+"${:,.2f}".format(TotalPMT))
        








dfResults = pd.DataFrame(ResultsList, columns = ['Scenario', 'Power Type','Backup', 'Annual Payment'])
dfResults['Annual Payment'] = dfResults.apply(lambda x: "${0:,.2f}".format(x['Annual Payment']), axis=1)

dfResults=dfResults.iloc[[0,1,2,23,27,31,37,42,45,53,58,61], :]
#dfResults=dfResults.iloc[[23], :]#,27,31,53,58,61], :]


dfResults['Description']=dfResults['Power Type']+' '+ dfResults['Backup']
dfResults = dfResults[['Scenario','Description','Annual Payment']]
print(dfResults)
















#print(dfResults)
